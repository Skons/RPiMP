esphome:
  name: sonoffs26
  on_boot:
    - lambda: |- #the delay switch must resemble the relay
        if (id(relay).state) {
          id(delay_switch_status) = 1;
        } else {
          id(delay_switch_status) = 0;
        }

esp8266:
  board: esp01_1m
  board_flash_mode: dout

globals:
  - id: delay_switch_status
    type: int
    restore_value: off
    initial_value: '0'
  - id: heartbeat_counter
    type: int
    restore_value: off
    initial_value: '0'
  - id: max_heartbeat_missed
    type: int
    restore_value: off
    initial_value: '20' #20 is 10 minutes. The heartbeat watcher waits 30 seconds. Make sure it is more then 5 minutes, RPiMP has a 5 minute timeout for reconnect

wifi:
  domain: .lan
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

  #Change to match your network
  manual_ip:
    static_ip: 192.168.0.2
    gateway: 192.168.0.1
    subnet: 255.255.255.0
    dns1: 192.168.0.1

api:
  encryption:
    key: EncryptionKey #Configure Encryption key from https://esphome.io/components/api.html

logger:

ota:
  password: 'OTA Password' #Change to something else

web_server:

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Amsterdam
    on_time:
      - seconds: 0
        minutes: 50
        hours: 0
        days_of_week: SUN-SAT
        then:
          - switch.turn_on: delay_switch
      - seconds: 0
        minutes: 0
        hours: 3
        days_of_week: SUN-SAT
        then:
          - switch.turn_off: delay_switch

#Enable if HA is to be connected
#status_led:
#  pin:
#    number: GPIO13
#    inverted: false

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Sonoff S26 Button"
    on_press:
      - switch.toggle: delay_switch
    on_double_click:
      - switch.turn_off: relay
#  - platform: status #Enable if HA is to be connected
#    name: "Sonoff S26 Status"

switch:
  - platform: template
    name: "Sonoff S26 Delay Switch"
    id: "delay_switch"
    lambda: |-
      if (id(delay_switch_status) > 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - switch.turn_on: relay
      - lambda: id(delay_switch_status) = 1;
    turn_off_action:
      - lambda: id(delay_switch_status) = 0;
  - platform: template
    name: "Sonoff S26 Real Delay Switch"
    id: "real_delay_switch"
    lambda: |-
      if (id(relay).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - logger.log: "real delay switch, turn on"
      - switch.turn_on: relay
      - switch.turn_on: delay_switch #make sure the delay switch is turned on
    turn_off_action:
      then:
        - if:
            condition: #Disable the relay only when it is on
              lambda: |-
                if (id(relay).state) {
                  return true;
                } else {
                  return false;
                }
            then:
              - logger.log: "Delay switch, waiting 15 seconds until shutdown"
              - delay: 15s
              - logger.log: "Delay switch, turn off power"
              - switch.turn_off: relay
              - switch.turn_off: delay_switch #make sure the delay switch is turned off
            else:
              - logger.log: "Relay is already off"
              - switch.turn_off: delay_switch #make sure the delay switch is turned off
  - platform: template
    name: "Sonoff S26 Heartbeat Switch"
    id: "heartbeat_switch"
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - logger.log: "Set heartbeat_counter to 0, switch the heartbeat_switch off"
      - script.stop: heartbeat_watcher
      - lambda: id(heartbeat_counter) = 0;
      - delay: 3s
      - switch.turn_off: heartbeat_switch
    turn_off_action:
      - logger.log: "Setting hearbeat switched to off"
      - script.execute: heartbeat_watcher
  - platform: gpio
    name: "Sonoff S26 Relay"
    restore_mode: RESTORE_DEFAULT_ON
    pin: GPIO12
    id: 'relay'
    on_turn_on:
      - lambda: "id(delay_switch_status) = 1;"
    on_turn_off:
      - script.stop: heartbeat_watcher
      - lambda: "id(delay_switch_status) = 0;"
  - platform: restart
    name: "Sonoff S26 Restart"

text_sensor:
  - platform: template
    name: "Current time"
    lambda: |-
      char str[17];
      time_t currTime = id(sntp_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
      return  { str };
    update_interval: 60s

script:
  - id: heartbeat_watcher
    mode: single
    then:
      - logger.log: "Starting heartbeat_watcher, getting in to the loop"
      - while:
          condition:
            lambda: |-
              return true;
          then:
            - logger.log: {level: DEBUG, format: "Heartbeat not received counter: %i ", args: [id(heartbeat_counter)]}
            - lambda: |-
                id(heartbeat_counter) += 1;
                if (id(heartbeat_counter) >= id(max_heartbeat_missed)) {
                  ESP_LOGI("heartbeat", "Max heartbeats missed, switching relay to off");
                  id(relay).turn_off();
                  id(heartbeat_watcher).stop();
                }
            - delay: 30s